// üîπ Fonction pour afficher/masquer les sections du menu
function toggleSection(sectionId) {
    document.querySelectorAll("section").forEach(section => {
        section.classList.add("hidden");
    });
    document.getElementById(sectionId).classList.remove("hidden");
}

// üîπ V√©rification des Sites Web
function checkSite() {
    let url = document.getElementById("urlInput").value;
    if (!url) {
        alert("Veuillez entrer une URL !");
        return;
    }

    document.getElementById("loader").classList.remove("hidden");
    document.getElementById("result-box").classList.add("hidden");

    fetch(`https://cybershield-api-2.onrender.com/check-site?url=${encodeURIComponent(url)}`)
        .then(response => response.json())
        .then(data => {
            let resultElement = document.getElementById("result");
            let resultBox = document.getElementById("result-box");
            let reportButton = document.getElementById("report-button");
            let copyButton = document.getElementById("copy-button");

            if (data.securityRating === "F") {
                resultElement.innerHTML = `‚ö†Ô∏è <strong>Site dangereux</strong><br> Type de menace: ${data.threatType || "Inconnu"}`;
                resultBox.className = "danger";
                reportButton.classList.remove("hidden");
            } else {
                resultElement.innerHTML = `‚úÖ <strong>Site s√©curis√©</strong>`;
                resultBox.className = "safe";
                reportButton.classList.add("hidden");
            }

            copyButton.classList.remove("hidden");
            addToHistory(url, data.securityRating);

            document.getElementById("loader").classList.add("hidden");
            document.getElementById("result-box").classList.remove("hidden");
        })
        .catch(error => {
            console.error("Erreur :", error);
            document.getElementById("result").innerHTML = "‚ùå Erreur lors de la v√©rification.";
            document.getElementById("loader").classList.add("hidden");
            document.getElementById("result-box").classList.remove("hidden");
        });
}

// üîπ Ajouter un site √† l'historique
function addToHistory(url, result) {
    let historyContainer = document.getElementById("history-list");
    if (!historyContainer) return;

    let newEntry = document.createElement("p");
    newEntry.innerHTML = `üîπ ${url} ‚Üí ${result === "F" ? "‚ö†Ô∏è Dangereux" : "‚úÖ S√©curis√©"}`;
    historyContainer.prepend(newEntry);
}

// üîπ Signaler un site suspect
function reportSite() {
    let url = document.getElementById("urlInput").value;
    if (!url) {
        alert("Veuillez entrer une URL !");
        return;
    }
    alert(`üö® Merci ! Le site ${url} a √©t√© signal√©.`);
}

// üîπ Effacer l'historique des analyses
function clearHistory() {
    document.getElementById("history-list").innerHTML = "";
}

// üîπ Copier le r√©sultat d'analyse
function copyResult() {
    let resultText = document.getElementById("result").innerText;
    navigator.clipboard.writeText(resultText).then(() => {
        alert("R√©sultat copi√© !");
    });
}

// üîπ G√©n√©ration de mots de passe s√©curis√©s
function generatePassword() {
    const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()";
    let password = "";
    for (let i = 0; i < 16; i++) {
        password += charset.charAt(Math.floor(Math.random() * charset.length));
    }
    document.getElementById("generated-password").value = password;
}

// üîπ Copier le mot de passe g√©n√©r√©
function copyPassword() {
    let password = document.getElementById("generated-password").value;
    if (!password) {
        alert("G√©n√©rez d'abord un mot de passe !");
        return;
    }
    navigator.clipboard.writeText(password);
    alert("Mot de passe copi√© !");
}

// üîπ V√©rification de la robustesse d'un mot de passe
function checkPasswordStrength() {
    let password = document.getElementById("passwordInput").value;
    let strength = "‚ö†Ô∏è Faible";
    if (password.length >= 12 && /[A-Z]/.test(password) && /[0-9]/.test(password) && /[!@#$%^&*]/.test(password)) {
        strength = "‚úÖ Fort";
    } else if (password.length >= 8) {
        strength = "‚ö†Ô∏è Moyen";
    }
    document.getElementById("password-strength").innerHTML = `Robustesse : ${strength}`;
}

// üîπ V√©rification des fuites de donn√©es avec Have I Been Pwned
function checkDataBreach() {
    let email = document.getElementById("emailInput").value;
    if (!email) {
        alert("Entrez une adresse e-mail !");
        return;
    }

    fetch(`https://haveibeenpwned.com/api/v3/breachedaccount/${encodeURIComponent(email)}`, {
        headers: { "hibp-api-key": "04cb4ed4a8c73c7b33816cc58a5d59b44be08615" }
    })
    .then(response => response.json())
    .then(data => {
        if (data.length > 0) {
            document.getElementById("breach-result").innerHTML = `‚ö†Ô∏è Cette adresse a √©t√© compromise dans ${data.length} fuite(s) de donn√©es.`;
        } else {
            document.getElementById("breach-result").innerHTML = "‚úÖ Aucune fuite d√©tect√©e.";
        }
    })
    .catch(error => {
        document.getElementById("breach-result").innerHTML = "‚ùå Impossible de v√©rifier.";
        console.error("Erreur :", error);
    });
}

// üîπ Analyse de fichiers malveillants
function scanFile() {
    let file = document.getElementById("fileInput").files[0];
    if (!file) {
        alert("S√©lectionnez un fichier !");
        return;
    }

    let fileName = file.name;
    document.getElementById("file-result").innerHTML = `üìù Analyse du fichier ${fileName} en cours...`;

    setTimeout(() => {
        let isMalicious = Math.random() < 0.2; // 20% de chance qu'il soit "infect√©"
        document.getElementById("file-result").innerHTML = isMalicious ? `‚ö†Ô∏è Fichier suspect d√©tect√© !` : `‚úÖ Fichier s√©curis√©.`;
    }, 2000);
}
